name: CI/CD - Main Branch

on:
  push:
    branches:
      - main
  workflow_dispatch:

# Prevent concurrent deployments
concurrency:
  group: main-deployment
  cancel-in-progress: false

jobs:
  # Setup and install dependencies
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-main-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.run_id }}

  # Run all quality checks
  quality-checks:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-main-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Run type checking
        run: pnpm typecheck

      - name: Run ESLint
        run: pnpm lint

      - name: Check code formatting
        run: pnpm format:check

  # Run unit tests
  test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-main-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Run unit tests
        run: pnpm test --coverage --reporter=verbose
        env:
          NODE_ENV: test

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('coverage/**') != ''
        with:
          name: main-coverage-report
          path: coverage/
          retention-days: 30

  # Build application
  build:
    needs: [setup, quality-checks, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-main-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: main-build-files
          path: .next/
          retention-days: 7

  # Run E2E tests
  e2e:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-main-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.run_id }}
          fail-on-cache-miss: true

      - name: Download build artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: main-build-files
          path: .next/

      - name: Build if artifacts not available
        if: steps.download-artifact.outcome == 'failure'
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Run Playwright tests
        run: pnpm test:e2e
        env:
          NODE_ENV: production

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('playwright-report/**') != ''
        with:
          name: main-playwright-report
          path: playwright-report/
          retention-days: 30

  # Deployment verification (triggered by Vercel)
  deployment-ready:
    needs: [quality-checks, test, build, e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Deployment ready notification
        run: |
          echo "üöÄ All checks passed! Deployment ready."
          echo "‚úÖ Quality checks: PASSED"
          echo "‚úÖ Unit tests: PASSED"
          echo "‚úÖ Build: PASSED"
          echo "‚úÖ E2E tests: PASSED"
          echo ""
          echo "Vercel will automatically deploy this commit to production."
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"

      - name: Create deployment status
        uses: actions/github-script@v7
        with:
          script: |
            const { context } = require('@actions/github');

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              description: 'All CI checks passed - ready for deployment',
              environment: 'production'
            });

  # Summary job
  ci-success:
    needs: [quality-checks, test, build, e2e, deployment-ready]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quality-checks.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.e2e.result }}" == "success" && \
                "${{ needs.deployment-ready.result }}" == "success" ]]; then
            echo "üéâ Main branch CI/CD completed successfully!"
            echo "All quality gates passed - production deployment authorized."
          else
            echo "‚ùå Main branch CI/CD failed"
            echo "Quality checks: ${{ needs.quality-checks.result }}"
            echo "Tests: ${{ needs.test.result }}"
            echo "Build: ${{ needs.build.result }}"
            echo "E2E: ${{ needs.e2e.result }}"
            echo "Deployment: ${{ needs.deployment-ready.result }}"
            exit 1
          fi
