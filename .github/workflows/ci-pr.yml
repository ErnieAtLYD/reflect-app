name: CI - Pull Request

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  pull_request_target:
    types: [opened, synchronize, ready_for_review]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Skip CI if PR is in draft mode
  check-draft:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - name: Check if PR is draft
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping CI for draft PR"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Running CI for ready PR"
          fi

  # Install dependencies and setup Node.js with caching
  setup:
    needs: check-draft
    if: needs.check-draft.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache node_modules
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}

  # Type checking
  typecheck:
    needs: [check-draft, setup]
    if: needs.check-draft.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Run type checking
        run: pnpm typecheck

  # Linting and formatting
  lint:
    needs: [check-draft, setup]
    if: needs.check-draft.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Run ESLint
        run: pnpm lint

      - name: Check code formatting
        run: pnpm format:check

  # Unit tests
  test:
    needs: [check-draft, setup]
    if: needs.check-draft.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Run unit tests
        run: pnpm test --coverage --reporter=verbose
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('coverage/**') != ''
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # Build verification
  build:
    needs: [check-draft, setup]
    if: needs.check-draft.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-files
          path: .next/
          retention-days: 1

  # End-to-end tests
  e2e:
    needs: [check-draft, setup, build]
    if: needs.check-draft.outputs.skip == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Restore node_modules
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          fail-on-cache-miss: true

      - name: Download build artifacts
        id: download-artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: build-files
          path: .next/

      - name: Build if artifacts not available
        if: steps.download-artifact.outcome == 'failure'
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Run Playwright tests
        run: pnpm test:e2e
        env:
          NODE_ENV: production

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('playwright-report/**') != ''
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Summary job - required status check
  ci-success:
    needs: [typecheck, lint, test, build, e2e]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.typecheck.result }}" == "success" && \
                "${{ needs.lint.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.e2e.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
          else
            echo "❌ One or more CI checks failed"
            echo "Type check: ${{ needs.typecheck.result }}"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Tests: ${{ needs.test.result }}"
            echo "Build: ${{ needs.build.result }}"
            echo "E2E: ${{ needs.e2e.result }}"
            exit 1
          fi
